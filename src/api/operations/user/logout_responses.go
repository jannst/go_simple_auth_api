// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"haw-hamburg.de/cloudWP/src/apimodel"
)

// LogoutNoContentCode is the HTTP code returned for type LogoutNoContent
const LogoutNoContentCode int = 204

/*LogoutNoContent successful operation

swagger:response logoutNoContent
*/
type LogoutNoContent struct {
}

// NewLogoutNoContent creates LogoutNoContent with default headers values
func NewLogoutNoContent() *LogoutNoContent {

	return &LogoutNoContent{}
}

// WriteResponse to the client
func (o *LogoutNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// LogoutInternalServerErrorCode is the HTTP code returned for type LogoutInternalServerError
const LogoutInternalServerErrorCode int = 500

/*LogoutInternalServerError logout failed

swagger:response logoutInternalServerError
*/
type LogoutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *apimodel.APIError `json:"body,omitempty"`
}

// NewLogoutInternalServerError creates LogoutInternalServerError with default headers values
func NewLogoutInternalServerError() *LogoutInternalServerError {

	return &LogoutInternalServerError{}
}

// WithPayload adds the payload to the logout internal server error response
func (o *LogoutInternalServerError) WithPayload(payload *apimodel.APIError) *LogoutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the logout internal server error response
func (o *LogoutInternalServerError) SetPayload(payload *apimodel.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LogoutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
