// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewUser new user
//
// swagger:model NewUser
type NewUser struct {
	BaseUser

	// password
	// Example: VerySecureLol_69
	// Required: true
	// Max Length: 256
	// Min Length: 8
	Password *string `json:"password"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NewUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseUser
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseUser = aO0

	// AO1
	var dataAO1 struct {
		Password *string `json:"password"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Password = dataAO1.Password

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NewUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseUser)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Password *string `json:"password"`
	}

	dataAO1.Password = m.Password

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this new user
func (m *NewUser) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseUser
	if err := m.BaseUser.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewUser) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this new user based on the context it is used
func (m *NewUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseUser
	if err := m.BaseUser.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NewUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewUser) UnmarshalBinary(b []byte) error {
	var res NewUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
