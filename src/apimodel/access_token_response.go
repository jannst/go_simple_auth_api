// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessTokenResponse access token response
//
// swagger:model AccessTokenResponse
type AccessTokenResponse struct {

	// Token to be included in X-API-TOKEN Header for secured endpoints
	// Example: dce7fce4dd4a41371fb6b4889d957974ba158d8dec805c8046e4ed95c7414ce6
	// Required: true
	// Max Length: 32
	// Min Length: 32
	// Pattern: [a-f0-9]{32}
	Token *string `json:"token"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this access token response
func (m *AccessTokenResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenResponse) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if err := validate.MinLength("token", "body", *m.Token, 32); err != nil {
		return err
	}

	if err := validate.MaxLength("token", "body", *m.Token, 32); err != nil {
		return err
	}

	if err := validate.Pattern("token", "body", *m.Token, `[a-f0-9]{32}`); err != nil {
		return err
	}

	return nil
}

func (m *AccessTokenResponse) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this access token response based on the context it is used
func (m *AccessTokenResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessTokenResponse) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessTokenResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessTokenResponse) UnmarshalBinary(b []byte) error {
	var res AccessTokenResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
